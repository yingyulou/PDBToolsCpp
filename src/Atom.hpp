/*
    Atom.hpp
    ========
        Class Atom implementation.
*/

#pragma once

#include <string>
#include <cstdio>
#include <cctype>
#include <boost/format.hpp>
#include <Eigen/Dense>
#include "Atom.h"
#include "Residue.h"

namespace PDBTools
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Using
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using std::string;
using boost::format;
using Eigen::RowVector3d;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom::Atom(const string &name, int num, const RowVector3d &coord,
    const string &alt, const string &occ, const string &tempF,
    const string &ele, const string &chg, Residue *owner):
    __name (name),
    __num  (num),
    __coord(coord),
    __alt  (alt),
    __occ  (occ),
    __tempF(tempF),
    __ele  (ele),
    __chg  (chg),
    __owner(owner)
{
    if (owner)
    {
        owner->sub().push_back(this);
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __name
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::name()
{
    return __name;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __num
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Atom::num()
{
    return __num;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __coord
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

RowVector3d &Atom::coord()
{
    return __coord;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __alt
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::alt()
{
    return __alt;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __occ
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::occ()
{
    return __occ;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __tempF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::tempF()
{
    return __tempF;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __ele
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::ele()
{
    return __ele;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __chg
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string &Atom::chg()
{
    return __chg;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Getter: __owner
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Residue *Atom::owner()
{
    return __owner;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __name
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::name(const string &val)
{
    __name = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __num
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::num(int val)
{
    __num = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __coord
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::coord(const RowVector3d &val)
{
    __coord = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __alt
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::alt(const string &val)
{
    __alt = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __occ
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::occ(const string &val)
{
    __occ = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __tempF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::tempF(const string &val)
{
    __tempF = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __ele
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::ele(const string &val)
{
    __ele = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __chg
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::chg(const string &val)
{
    __chg = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setter: __owner
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::owner(Residue *val)
{
    __owner = val;

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::copy()
{
    return new Atom(
        __name,
        __num,
        __coord,
        __alt,
        __occ,
        __tempF,
        __ele,
        __chg
    );
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// operator-
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

double Atom::operator-(const Atom &rhs) const
{
    return (__coord - rhs.__coord).norm();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dump
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Atom *Atom::dump(const string &dumpFilePath, const string &fileMode)
{
    string chainName, resName, resIns;
    int resNum = 0;

    if (__owner)
    {
        resName = __owner->name();
        resNum  = __owner->num();
        resIns  = __owner->ins();

        if (__owner->owner())
        {
            chainName = __owner->owner()->name();
        }
    }

    FILE *fo = fopen(dumpFilePath.c_str(), fileMode.c_str());

    if (isdigit(__name[0]) || __name.size() == 4)
    {
        fprintf(fo, "ATOM  %5d %-4s%1s%3s %1s%4d%1s   %8.3f%8.3f%8.3f%6s%6s          %2s%2s\n",
            __num,
            __name.c_str(),
            __alt.c_str(),
            resName.c_str(),
            chainName.c_str(),
            resNum,
            resIns.c_str(),
            __coord[0],
            __coord[1],
            __coord[2],
            __occ.c_str(),
            __tempF.c_str(),
            __ele.c_str(),
            __chg.c_str()
        );
    }
    else
    {
        fprintf(fo, "ATOM  %5d  %-3s%1s%3s %1s%4d%1s   %8.3f%8.3f%8.3f%6s%6s          %2s%2s\n",
            __num,
            __name.c_str(),
            __alt.c_str(),
            resName.c_str(),
            chainName.c_str(),
            resNum,
            resIns.c_str(),
            __coord[0],
            __coord[1],
            __coord[2],
            __occ.c_str(),
            __tempF.c_str(),
            __ele.c_str(),
            __chg.c_str()
        );
    }

    fclose(fo);

    return this;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dump Str
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string Atom::dumpStr()
{
    string chainName, resName, resIns, formatStr;
    int resNum = 0;

    if (__owner)
    {
        resName = __owner->name();
        resNum  = __owner->num();
        resIns  = __owner->ins();

        if (__owner->owner())
        {
            chainName = __owner->owner()->name();
        }
    }

    if (isdigit(__name[0]) || __name.size() == 4)
    {
        formatStr = "ATOM  %5d %-4s%1s%3s %1s%4d%1s   %8.3f%8.3f%8.3f%6s%6s          %2s%2s\n";
    }
    else
    {
        formatStr = "ATOM  %5d  %-3s%1s%3s %1s%4d%1s   %8.3f%8.3f%8.3f%6s%6s          %2s%2s\n";
    }

    string pdbStr = (format(formatStr) %
        __num                          %
        __name                         %
        __alt                          %
        resName                        %
        chainName                      %
        resNum                         %
        resIns                         %
        __coord[0]                     %
        __coord[1]                     %
        __coord[2]                     %
        __occ                          %
        __tempF                        %
        __ele                          %
        __chg
    ).str();

    return pdbStr;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// str
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string Atom::__str() const
{
    return (format("<Atom object: %d %s [%.3f, %.3f, %.3f], at 0x%p>") %
        __num                                                          %
        __name                                                         %
        __coord[0]                                                     %
        __coord[1]                                                     %
        __coord[2]                                                     %
        this
    ).str();
}


}  // End namespace PDBTools
